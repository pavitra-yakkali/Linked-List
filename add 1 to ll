class ListNode {
    int data;
    ListNode next;

    ListNode(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {

    public static ListNode reverse(ListNode head) {
        ListNode curr = head, prev = null, next = null;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public ListNode addOne(ListNode head) {
        ListNode new_head = reverse(head);
        ListNode current = new_head, prev = null;
        int carry = 0;
        while (current != null) {
            int sum = 0;
            if (prev == null) {
                sum = current.data + 1;
            } else {
                sum = current.data + carry;
            }
            carry = sum / 10;
            current.data = sum % 10;
            prev = current;
            current = current.next;
        }

        if (carry == 1) {
            ListNode new_node = new ListNode(1);
            prev.next = new_node;
        }

        return reverse(new_head);
    }

    // Utility function to print the linked list
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.data);
            if (head.next != null) System.out.print(" -> ");
            head = head.next;
        }
        System.out.println();
    }

    // Main function
    public static void main(String[] args) {
        // Create a sample list: 1 -> 9 -> 9
        ListNode head = new ListNode(1);
        head.next = new ListNode(9);
        head.next.next = new ListNode(9);

        System.out.print("Original number: ");
        printList(head);

        Solution sol = new Solution();
        ListNode result = sol.addOne(head);

        System.out.print("After adding one: ");
        printList(result);
    }
}

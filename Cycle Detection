class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow) {   // no need fast!=null again
                return true;
            }
        }
        return false;
    }

    // Easy main method to test
    public static void main(String[] args) {
        Solution sol = new Solution();

        // Example 1: Linked list with cycle
        ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        node1.next = node2;
        node2.next = node3;
        node3.next = node1;  // creates a cycle

        System.out.println("List 1 has cycle? " + sol.hasCycle(node1)); // true

        // Example 2: Linked list without cycle
        ListNode a = new ListNode(10);
        ListNode b = new ListNode(20);
        ListNode c = new ListNode(30);
        a.next = b;
        b.next = c;

        System.out.println("List 2 has cycle? " + sol.hasCycle(a)); // false
    }
}
